type Query {
	archivePreview(parseResult: ParseResultInput!): String! # HTML Preview
	archivePublishStatus(txId: ID!): PublishStatus!
	walletDonationAddress: String!
	archivedArticles: [ParseResult!]!
	usageAnalytics: UsageAnalytics!
	donationWallet: WalletInfo
}

type Mutation {
	publishEncryptedWalletForPeer(
		encryptedWalletJWK: String!
		walletIdentifier: ID!
	): String! # Permalink TxId For Encrypted Wallet File
	scrapeWebsite(url: String!): ParseResult!
	publishArchive(parseResult: ParseResultInput!): ParseResult! # Permalink (or just the site URL bc it could take a while and you'll have the socket results coming through)
}

type WalletInfo {
	address: String!
	balance: WalletBalance!
}

type WalletBalance {
	ar: String!
	winston: String!
}

type UsageAnalytics {
	articleCount: Int!
}

enum ParseResultDirection {
	rtl
	ltr
}

enum PublishStatus {
	PENDING
	FAILED
	SUCCESS
}

type ParseResult {
	id: ID
	type: String!
	content: String
	author: String
	title: String
	sample: String
	publishedAt: String
	textDirection: String
	wordCount: Float!
	heroImageUrl: String
	afinnSentimentScore: Float!
	readingTimeInMs: Float
	originUrl: String
	archivedAt: String
	#computed
	humanReadableSentiment: String!
}

input ParseResultInput {
	type: String!
	content: String
	author: String
	title: String
	sample: String
	publishedAt: String
	textDirection: String
	wordCount: Float!
	heroImageUrl: String
	afinnSentimentScore: Float!
	readingTimeInMs: Float
	originUrl: String!
	archivedAt: String!
}
